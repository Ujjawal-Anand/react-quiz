{"version":3,"sources":["logo.svg","api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","quizQuestions","question","options","rightAnswer","Question","props","className","content","QuestionCount","counter","total","AnswerOption","type","name","id","answerContent","value","disabled","answer","onChange","onAnswerSelected","htmlFor","Quiz","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","questionTotal","answerOptions","map","Result","score","App","shuffleArray","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","handleAnswerSelected","event","setUserAnser","currentTarget","state","setTimeout","setNextQuestion","setState","result","userAnswer","answersCount","renderQuiz","renderResult","shuffleAnswerOptions","this","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a425348e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var quizQuestions = [\n    {\n        question: \"What franchise would you rather play a game from?\",\n        options: [ \"Halo\", \"Nitendo\", \"Pokemon\" ],\n        rightAnswer: \"Halo\"\n    },\n    {\n        question: \"Which console would you prefer to play with friends?\",\n        options: [ \"X-Box\", \"Nitendo\", \"Sony\"],\n        rightAnswer: \"X-Box\"\n    },\n    {\n        question: \"Which of these racing franchises would you prefer to play a game from?\",\n        options: [ \"Microsoft\", \"Nitendo\", \"Forza\" ],\n        rightAnswer: \"Microsoft\"\n    },\n    {\n        question: \"Which of these games do you think is best?\",\n        options: [ \"BioShock\", \"The Legend of Zelda\", \"Final Fantsy VII\" ],\n        rightAnswer: \"BioShock\"\n    },\n    {\n        question: \"What console would you prefer to own?\",\n        options: [ \"X-Box one\", \"Will U\", \"Playstation 4\"],\n        rightAnswer: \"X-Box one\"\n    }\n  ];\n  \n  export default quizQuestions;\n  ","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/*\n    Since this is going to be stateless presentation component\n    we don't need to use a class to create the component as it allows\n    to eliminate a lot of boilerplate code this way\n*/\nfunction Question(props) {\n    return (\n    <h2 className=\"question\">{props.content}</h2>\n    );\n}\n\n/*\n    used to define the type of prop and what \n    props are required, will warn when there is \n    invalid propType\n*/\nQuestion.propTypes = {\n    content: PropTypes.string.isRequired\n};\n\nexport default Question;\n\n/*\n    Compoennets:\n        Presentational - defines how things look\n\n        container - should be concerned with how things work\n*/","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n    return (\n        <div className=\"questionCount\">\n            Question <span>{props.counter}</span> of \n            <span> {props.total}</span>\n        </div>\n    );\n}\n\nQuestionCount.propTypes = {\n    counter: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n    return (\n        <li className=\"answerOption\">\n            <input\n            type=\"radio\"\n            className=\"radioCustomButton\"\n            name=\"radioGroup\"\n            id={props.answerContent}\n            value={props.answerContent}\n            disabled={props.answer}\n            onChange={props.onAnswerSelected}\n            />\n            <label className=\"radioCustomLabel\" htmlFor={props.answerContent}>\n                {props.answerContent}\n            </label>\n        </li>\n    );\n}\n\nAnswerOption.propTypes = {\n    answerContent: PropTypes.string.isRequired,\n    answer: PropTypes.string.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n}\n\nexport default AnswerOption;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from './Question';\nimport QuestionCount from './QuestionCount';\nimport AnswerOption from './AnswerOption';\n\nfunction Quiz(props) {\n\n    function renderAnswerOptions(key) {\n        return (\n            <AnswerOption\n                key={key}\n                answerContent={key}\n                answer={props.answer}\n                questionId={props.questionId}\n                onAnswerSelected={props.onAnswerSelected}\n            />\n        )\n    }\n\n    return (\n        <CSSTransitionGroup\n            className=\"container\"\n            component=\"div\"\n            transitionName=\"fade\"\n            transitionEnterTimeout={800}\n            transitionLeaveTimeout={500}\n            transitionAppear\n            transitionAppearTimeout={500}\n        >\n            <div key={props.questionId}>\n                <QuestionCount\n                    counter={props.questionId}\n                    total={props.questionTotal}\n                />\n                <Question content={props.question} />\n                <ul className=\"answerOptions\">\n                    {props.answerOptions.map(renderAnswerOptions)}\n                </ul>\n            </div>\n\n        </CSSTransitionGroup>\n    )\n}\n\nQuiz.propTypes = {\n    answer: PropTypes.string.isRequired,\n    answerOptions: PropTypes.array.isRequired,\n    counter: PropTypes.number.isRequired,\n    question: PropTypes.string.isRequired,\n    questionId: PropTypes.number.isRequired,\n    questionTotal: PropTypes.number.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n}\n\nexport default Quiz;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Result(props) {\n    return (\n        <CSSTransitionGroup\n            className=\"container result\"\n            component=\"div\"\n            transitionName=\"fade\"\n            transitionEnterTimeout={800}\n            transitionLeaveTimeout={500}\n            transitionAppear\n            transitionAppearTimeout={500}\n        >\n            <div className=\"result\">\n                You score is <strong>{props.score}</strong>\n            </div>\n        </CSSTransitionGroup>\n    );\n}\n\nResult.propTypes = {\n    score: PropTypes.number.isRequired\n};\n\nexport default Result;","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport logo from './logo.svg';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result'\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      score: 0,\n      result: false\n    }\n  }\n\n  /*\n    This lifecycle invoked immediately after a \n    component is mounted\n  */\n  componentDidMount() {\n    const shuffleAnswerOptions = \n        quizQuestions.map((question) => this.shuffleArray(question.options));\n\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffleAnswerOptions[0]\n    });\n  }\n\n  /*\n    Will shuffle elements of an array\n  */\n  shuffleArray = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // while there remain elements to shuffle...\n    while(0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random()*currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue\n    } \n    return array;\n  }\n\n  handleAnswerSelected = (event) => {\n    this.setUserAnser(event.currentTarget.value);\n    if(this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      this.setState({\n        result: true\n      });\n    }\n  }\n\n  setUserAnser = (userAnswer) => {\n    const score = (userAnswer === quizQuestions[this.state.counter].rightAnswer) ? 1 : -1\n\n    this.setState((state) => ({\n      answersCount: {\n        ...state.answersCount,\n        [this.state.counter]: userAnswer\n      },\n      answer: userAnswer,\n      score: state.score + score\n    }));\n  }\n\n  setNextQuestion = () => {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].options,\n      answer: ''\n    })\n  }\n\n  renderQuiz = () => {\n    return (\n      <Quiz\n          answer={this.state.answer}\n          counter={this.state.counter}\n          answerOptions={this.state.answerOptions}\n          questionId={this.state.questionId}\n          question={this.state.question}\n          questionTotal={quizQuestions.length}\n          onAnswerSelected={this.handleAnswerSelected}\n        />\n    );\n  }\n\n  renderResult = () => {\n    return (\n      <Result score={this.state.score} />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>React Quiz</h2>\n        </header>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}